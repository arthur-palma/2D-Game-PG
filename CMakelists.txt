cmake_minimum_required(VERSION 3.11)
project(MeuJogo2D)

# Define o padrão do C++
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# --- Gerenciamento de Dependências com FetchContent ---
include(FetchContent)

# Baixa e configura a GLFW
FetchContent_Declare(
    glfw
    GIT_REPOSITORY https://github.com/glfw/glfw.git
    GIT_TAG 3.3.8
)
FetchContent_MakeAvailable(glfw)

# Baixa e configura a GLM
FetchContent_Declare(
    glm
    GIT_REPOSITORY https://github.com/g-truc/glm.git
    GIT_TAG 1.0.1
)
FetchContent_MakeAvailable(glm)

# Baixa e configura a STB (para carregar imagens)
FetchContent_Declare(
    stb
    GIT_REPOSITORY https://github.com/nothings/stb.git
    GIT_TAG master
)
FetchContent_MakeAvailable(stb)
# --- Fim das Dependências ---


# --- Configuração do Projeto Principal ---

# Adiciona o nosso executável principal do jogo.
# Ele será criado a partir dos arquivos listados aqui.
add_executable(MeuJogo 
    src/main.cpp 
    src/Game.cpp
    src/Player.cpp
    src/Soul.cpp
    src/Shader.cpp 
    common/glad.c)
    
# Informa ao nosso executável onde encontrar os arquivos de cabeçalho (.h)
target_include_directories(MeuJogo PRIVATE
    "include" # Para nossos próprios headers
    ${glm_SOURCE_DIR}
    ${stb_SOURCE_DIR}
)

# Define as bibliotecas de sistema operacional para o OpenGL
if(WIN32)
    set(OPENGL_LIBS opengl32)
elseif(APPLE)
    find_library(OpenGL_LIBRARY OpenGL)
    set(OPENGL_LIBS ${OpenGL_LIBRARY})
else()
    find_package(OpenGL REQUIRED)
    set(OPENGL_LIBS OpenGL::GL)
endif()

# Vincula (linka) as bibliotecas necessárias ao nosso executável
target_link_libraries(MeuJogo PRIVATE glfw ${OPENGL_LIBS})